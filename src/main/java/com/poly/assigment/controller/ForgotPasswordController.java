package com.poly.assigment.controller;

import com.poly.assigment.entity.User;
import com.poly.assigment.service.UserService;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.mail.internet.MimeMessage;
import java.util.Optional;
import java.util.UUID;

@Controller
public class ForgotPasswordController {

    @Autowired
    private UserService userService;

    @Autowired
    private JavaMailSender mailSender;

    @GetMapping("/quen-mat-khau")
    public String showForgotPasswordForm() {
        return "home/quen-mat-khau";
    }

    @PostMapping("/quen-mat-khau")
    public String processForgotPassword(@RequestParam("username") String username,
                                        @RequestParam("email") String email,
                                        HttpServletRequest request,
                                        RedirectAttributes redirectAttributes) {
        // T√¨m ng∆∞·ªùi d√πng b·∫±ng email tr∆∞·ªõc
        Optional<User> userOptional = userService.findByEmail(email);

        if (userOptional.isEmpty() || !userOptional.get().getTenDangNhap().equals(username)) {
            // N·∫øu kh√¥ng t√¨m th·∫•y email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p kh√¥ng kh·ªõp
            redirectAttributes.addFlashAttribute("error", "T√™n ƒëƒÉng nh·∫≠p v√† email kh√¥ng kh·ªõp.");
            return "redirect:/quen-mat-khau";
        }

        // N·∫øu th√¥ng tin ch√≠nh x√°c, ti·∫øp t·ª•c x·ª≠ l√Ω
        String token = UUID.randomUUID().toString();
        try {
            userService.updateResetPasswordToken(token, email);
            String resetLink = getSiteURL(request) + "/dat-lai-mat-khau?token=" + token;
            sendEmail(email, resetLink);
            redirectAttributes.addFlashAttribute("message", "Ch√∫ng t√¥i ƒë√£ g·ª≠i m·ªôt link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë·∫øn email c·ªßa b·∫°n.");
        } catch (Exception ex) {
            redirectAttributes.addFlashAttribute("error", ex.getMessage());
        }
        return "redirect:/quen-mat-khau";
    }

    @GetMapping("/dat-lai-mat-khau")
    public String showResetPasswordForm(@RequestParam("token") String token, Model model) {
        Optional<User> userOptional = userService.getByResetPasswordToken(token);
        if (userOptional.isEmpty()) {
            model.addAttribute("error", "Link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
            return "home/dangnhap";
        }
        model.addAttribute("token", token);
        return "home/dat-lai-mat-khau";
    }

    @PostMapping("/dat-lai-mat-khau")
    public String processResetPassword(@RequestParam("token") String token,
                                       @RequestParam("password") String password,
                                       @RequestParam("confirmPassword") String confirmPassword,
                                       RedirectAttributes redirectAttributes,
                                       Model model) {

        if (!password.equals(confirmPassword)) {
            model.addAttribute("error", "M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp!");
            model.addAttribute("token", token);
            return "home/dat-lai-mat-khau";
        }

        Optional<User> userOptional = userService.getByResetPasswordToken(token);
        if (userOptional.isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "Link kh√¥ng h·ª£p l·ªá!");
            return "redirect:/dang-nhap";
        }

        userService.updatePassword(userOptional.get(), password);
        redirectAttributes.addFlashAttribute("message", "B·∫°n ƒë√£ ƒë·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
        return "redirect:/dang-nhap";
    }

    private String getSiteURL(HttpServletRequest request) {
        String siteURL = request.getRequestURL().toString();
        return siteURL.replace(request.getServletPath(), "");
    }

    public void sendEmail(String recipientEmail, String link) throws Exception {
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

        helper.setFrom("dungntts00667@fpt.edu.vn", "H·ªó tr·ª£ kh√°ch h√†ng"); // ‚úÖ Thay email th·∫≠t c·ªßa b·∫°n v√†o ƒë√¢y
        helper.setTo(recipientEmail);

        String subject = "üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n";

        String content = """
            <div style="font-family: Arial, sans-serif; background-color: #f9f9f9; padding: 30px;">
                <div style="max-width: 600px; margin: auto; background-color: #ffffff; border-radius: 10px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); overflow: hidden;">
                    
                    <div style="background-color: #007bff; color: white; text-align: center; padding: 20px;">
                        <h2 style="margin: 0;">H·ªó tr·ª£ kh√°ch h√†ng</h2>
                    </div>
                    
                    <div style="padding: 25px; color: #333;">
                        <p>Ch√†o b·∫°n,</p>
                        <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh.</p>
                        <p>Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øn h√†nh thay ƒë·ªïi m·∫≠t kh·∫©u:</p>

                        <div style="text-align: center; margin: 30px 0;">
                            <a href="%s" 
                               style="background-color: #007bff; color: white; padding: 14px 28px; 
                                      text-decoration: none; border-radius: 8px; font-size: 16px; 
                                      font-weight: bold; display: inline-block;">
                                üîÅ ƒê·ªïi m·∫≠t kh·∫©u ngay
                            </a>
                        </div>

                        <p>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
                        <br>
                        <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© H·ªó tr·ª£ kh√°ch h√†ng</strong></p>
                    </div>

                    <div style="background-color: #f1f1f1; text-align: center; padding: 10px; font-size: 12px; color: #777;">
                        ¬© 2025 C√¥ng ty .... M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
                    </div>
                </div>
            </div>
        """.formatted(link);

        helper.setSubject(subject);
        helper.setText(content, true);

        mailSender.send(message);
    }
}