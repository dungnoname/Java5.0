package com.poly.assigment.controller;

import com.poly.assigment.entity.*;
import com.poly.assigment.service.*;
import com.poly.assigment.util.UserSessionUtil;
import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Controller
@RequestMapping("/don-hang")
public class DonHangController {

    @Autowired
    private HoaDonService hoaDonService;
    @Autowired
    private ChiTietHoaDonService chiTietHoaDonService;
    @Autowired
    private TrangThaiDonHangService trangThaiDonHangService;
    @Autowired
    private GioHangService gioHangService;
    @Autowired
    private UserService userService;
    @Autowired
    private UserSessionUtil userSessionUtil;

    // ‚úÖ L·∫•y user hi·ªán t·∫°i (t·∫°m th·ªùi l√† user id = 1 n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p)
    private User getCurrentUser(HttpSession session) {
        User user = (User) session.getAttribute("userSession");
        if (user == null) {
            user = userService.findById(1)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y user t·∫°m th·ªùi"));
            session.setAttribute("userSession", user);
        }
        return user;
    }

    // ‚úÖ GET /don-hang - hi·ªÉn th·ªã ƒë∆°n h√†ng & gi·ªè h√†ng
    @GetMapping
    public String viewDonHang(Model model, HttpSession session) {
        User user = getCurrentUser(session);

        List<GioHang> gioHangList = gioHangService.getGioHangByUser(user);

        BigDecimal tongTien = gioHangList.stream()
                .map(item -> item.getSanPham().getDonGiaBan()
                        .multiply(BigDecimal.valueOf(item.getSoLuong())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        List<HoaDon> hoaDonList = hoaDonService.findAll().stream()
                .filter(hd -> hd.getNguoiDung() != null
                        && hd.getNguoiDung().getUserId().equals(user.getUserId()))
                .toList();

        model.addAttribute("gioHangList", gioHangList);
        model.addAttribute("tongTien", tongTien);
        model.addAttribute("hoaDonList", hoaDonList);

        return "home/donHang";
    }

    // ‚úÖ POST /don-hang/xac-nhan - x√°c nh·∫≠n ƒë·∫∑t h√†ng (tr·∫°ng th√°i: Ch·ªù x√°c nh·∫≠n)
    @PostMapping("/xac-nhan")
    public String xacNhanDonHang(Model model, HttpSession session) {
        User user = getCurrentUser(session);
        List<GioHang> gioHangList = gioHangService.getGioHangByUser(user);

        if (gioHangList.isEmpty()) {
            model.addAttribute("error", "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
            model.addAttribute("gioHangList", gioHangList);
            model.addAttribute("tongTien", BigDecimal.ZERO);
            return "home/donHang";
        }

        HoaDon hoaDon = new HoaDon();
        hoaDon.setNguoiDung(user);
        hoaDon.setNgayLap(LocalDateTime.now());
        hoaDon.setTrangThaiDonHang(trangThaiDonHangService.findById(0).orElse(null)); // üëâ Ch·ªù x√°c nh·∫≠n

        HoaDon savedHoaDon = hoaDonService.save(hoaDon);

        for (GioHang item : gioHangList) {
            ChiTietHoaDon cthd = new ChiTietHoaDon();
            cthd.setHoaDon(savedHoaDon);
            cthd.setSanPham(item.getSanPham());
            cthd.setSoLuongBan(item.getSoLuong());
            cthd.setDonGia(item.getSanPham().getDonGiaBan());
            chiTietHoaDonService.save(cthd);
        }

        gioHangService.deleteAllByUser(user);

        model.addAttribute("hoaDon", savedHoaDon);
        model.addAttribute("message", "ƒê·∫∑t h√†ng th√†nh c√¥ng! ƒê∆°n c·ªßa b·∫°n ƒëang ch·ªù x√°c nh·∫≠n.");
        return "home/datHangThanhCong";
    }

    // ‚úÖ POST /don-hang/huy/{id} - ng∆∞·ªùi d√πng h·ªßy ƒë∆°n (ch·ªâ khi ƒëang ch·ªù x√°c nh·∫≠n)
    @PostMapping("/huy/{id}")
    public String huyDonHang(@PathVariable("id") Integer id, HttpSession session, Model model) {
        User user = getCurrentUser(session);
        HoaDon hoaDon = hoaDonService.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

        if (!hoaDon.getNguoiDung().getUserId().equals(user.getUserId())) {
            model.addAttribute("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn h·ªßy ƒë∆°n h√†ng n√†y!");
            return "redirect:/don-hang";
        }

        if (hoaDon.getTrangThaiDonHang().getMaTT() != 0) {
            model.addAttribute("error", "ƒê∆°n h√†ng n√†y kh√¥ng th·ªÉ h·ªßy!");
            return "redirect:/don-hang";
        }

        hoaDon.setTrangThaiDonHang(trangThaiDonHangService.findById(4).orElse(null)); // üëâ H·ªßy
        hoaDonService.save(hoaDon);

        return "redirect:/don-hang";
    }

    // ‚úÖ GET /don-hang/chi-tiet/{id}
    @GetMapping("/chi-tiet/{id}")
    public String chiTietDonHang(@PathVariable("id") Integer id, Model model, HttpSession session) {
        User user = getCurrentUser(session);
        HoaDon hoaDon = hoaDonService.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n"));

        if (!hoaDon.getNguoiDung().getUserId().equals(user.getUserId())) {
            model.addAttribute("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y!");
            return "home/donHang";
        }

        List<ChiTietHoaDon> chiTietList = chiTietHoaDonService.findByHoaDon(hoaDon);
        BigDecimal tongTien = chiTietList.stream()
                .map(ct -> ct.getDonGia().multiply(BigDecimal.valueOf(ct.getSoLuongBan())))
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        model.addAttribute("tongTien", tongTien);
        model.addAttribute("hoaDon", hoaDon);
        model.addAttribute("chiTietList", chiTietList);
        return "home/chiTietDonHang";
    }

    @PostMapping("/dat-lai/{id}")
    public String datLaiDonHang(@PathVariable("id") Integer id, HttpSession session, Model model) {
        User user = getCurrentUser(session);
        HoaDon hoaDon = hoaDonService.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"));

        // Ki·ªÉm tra quy·ªÅn s·ªü h·ªØu
        if (!hoaDon.getNguoiDung().getUserId().equals(user.getUserId())) {
            model.addAttribute("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn thao t√°c ƒë∆°n h√†ng n√†y!");
            return "redirect:/don-hang";
        }

        // Ch·ªâ cho ph√©p ƒë·∫∑t l·∫°i n·∫øu ƒë∆°n h√†ng ƒë√£ h·ªßy
        if (hoaDon.getTrangThaiDonHang().getMaTT() != 4) {
            model.addAttribute("error", "Ch·ªâ c√≥ th·ªÉ ƒë·∫∑t l·∫°i ƒë∆°n h√†ng ƒë√£ b·ªã h·ªßy!");
            return "redirect:/don-hang";
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i l·∫°i th√†nh "Ch·ªù x√°c nh·∫≠n"
        hoaDon.setTrangThaiDonHang(trangThaiDonHangService.findById(0).orElse(null));
        hoaDon.setNgayLap(LocalDateTime.now()); // c·∫≠p nh·∫≠t l·∫°i th·ªùi gian ƒë·∫∑t
        hoaDonService.save(hoaDon);

        model.addAttribute("message", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i v√† ƒëang ch·ªù x√°c nh·∫≠n.");
        return "redirect:/don-hang/chi-tiet/" + id;
    }
}
